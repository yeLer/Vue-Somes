<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Title</title>
  <script type="text/javascript" src="../lib/vue-2.4.0.js"></script>
  <link rel="stylesheet" href="../lib/bootstrap-3.3.7.css">
  <style>
  </style>
</head>

<body>
  <div id="app">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title">添加品牌</h3>
      </div>
      <div class="panel-body form-inline">
        <label>
          Id:
          <input type="text" class="form-control" v-model="id">
        </label>

        <label>
          Name:
          <input type="text" class="form-control" v-model="name">
        </label>

        <!-- 在Vue中，使用事件绑定机制，为元素指定处理函数的时候，如果加了小括号，就可以给函数传参了 -->
        <input type="button" value="添加" class="btn btn-primary" @click="add()">

        <label>
          搜索名称关键字：
          <input type="text" class="form-control" v-model="keywords">
        </label>
      </div>
    </div>

    <table class="table table-bordered table-hover table-striped">
      <thead>
        <tr>
          <th>Id</th>
          <th>Name</th>
          <th>Ctime</th>
          <th>Operation</th>
        </tr>
      </thead>
      <tbody>
        <!-- 之前， v-for 中的数据，都是直接从 data 上的list中直接渲染过来的 -->
        <!-- 现在， 我们自定义了一个 search 方法，同时，把 所有的关键字，通过传参的形式，传递给了 search 方法 -->
        <!-- 在 search 方法内部，通过 执行 for 循环， 把所有符合 搜索关键字的数据，保存到 一个新数组中，返回 -->
        <tr v-for="item in search(keywords)" :key="item.id">
          <!-- <tr v-for="item in list" :key="item.id"> -->
          <td>{{ item.id }}</td>
          <td v-text="item.name"></td>
          <td>{{ item.ctime | dataFormat()}}</td>
          <td>
            <a href="" @click.prevent="del(item.id)">删除</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <script>
    // 过滤器的定义语法
    // Vue.filter('过滤器的名称', function(){})

    // 过滤器中的 function ，第一个参数，已经被规定死了，永远都是 过滤器 管道符前面 传递过来的数据
    /* Vue.filter('过滤器的名称', function (data) {
      return data + '123'
    }) */
    Vue.filter('dataFormat', function (dataStr,pattern='') {
      // 根据给定的时间字符串得到特定的时间
      var dt = new Date(dataStr)
      // yyyy-mm-dd
      var y = dt.getFullYear()
      var m = dt.getMonth()
      var d = dt.getDate()

      // return y + '-' + m + '-' + d;
      // 这里的引号是tab键上面的引号
      // return `${y}-${m}-${d}`
      if (pattern.toLowerCase() === 'yyyy-mm-dd') {
        return `${y}-${m}-${d}`
      }
      else{
        var hh = dt.getHours()
        var mm = dt.getMinutes()
        var ss = dt.getSeconds()
        return `${y}-${m}-${d} ${hh}:${mm}:${ss}`
      }
    })

    var vm = new Vue({
      el: '#app',
      data: {
        msg: 'Vue',
        id: '',
        pattern:'',
        name: '',
        keywords: '', // 搜索的关键字
        list: [
          { id: 1, name: '奔驰', ctime: new Date() },
          { id: 2, name: '宝马', ctime: new Date() }
        ]
      },
      methods: {
        add() {
          // 当填写的数据都不为空的时候
          if (this.id != null && this.name != null) {
            this.list.push({ id: this.id, name: this.name, ctime: new Date() });
            this.id = this.name = null;
          }
        },
        del(id) {
          // 根据id找到删除数据的索引
          var index = this.list.findIndex((item) => {
            if (item.id == id) {
              // 在 数组的方法中，如果 return true，就会立即终止这个数组的后续循环
              return true
            }
          })
          this.list.splice(index, 1);
        },
        search(keywords) {
          return this.list.filter(item => {
            // 注意 ： ES6中，为字符串提供了一个新方法，叫做  String.prototype.includes('要包含的字符串')
            //  如果包含，则返回 true ，否则返回 false
            //  contain
            if (item.name.includes(keywords)) {
              return item
            }
          })
        }
      }
    })
  </script>
</body>

</html>