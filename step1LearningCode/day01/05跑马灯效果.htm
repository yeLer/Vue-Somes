<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Title</title>
  <script type="text/javascript" src="../lib/vue-2.4.0.js"></script>
</head>
<body>
  <div id="app">
    <input type="button" value="浪起来" title="mytitle" @click="lang">
    <!--v-bind是vue中提供的用于属性绑定的指令  -->
    <input type="button" value="低调" v-bind:title="mytitle" @click="stop">
    <h2>{{msg}}</h2>
  </div>
  <script>
    // 注意：在 VM实例中，如果想要获取 data 上的数据，或者 想要调用 methods 中的 方法，
    //必须通过 this.数据属性名  或  this.方法名 来进行访问，这里的this，就表示 我们 new 出来的  VM 实例对象
    var vm = new Vue({
    el: '#app', 
      data: {
        msg: '猥琐发育,别浪~~~',
        mytitle:"我是一个按钮",
        intervalId: null // 在data上定义 定时器Id
      },
      methods:{
        // 注意： VM实例，会监听自己身上 data 中所有数据的改变，只要数据一发生变化，
        //就会自动把 最新的数据，从data 上同步到页面中去；【好处：程序员只需要关心数据，不需要考虑如何重新渲染DOM页面】
        lang(){
          // 为了避免定时器重复开启
          if (this.intervalId!=null) {
            return;
          }
          // 这样的写法this没法访问
          // setInterval(function() {
          //   var start = this.msg.substring(0,1);
          //   var end = this.msg.substring(1);
          //   this.msg = end+start;
          // },400)
          // 改写为箭头函数,function去掉，然后在()与{之间加  => 
            this.intervalId = setInterval(()=> {
              var start = this.msg.substring(0,1);
              var end = this.msg.substring(1);
              this.msg = end+start;
            },400)
        },
        // 停止下来的思路是清除定时器
        stop(){
          clearInterval(this.intervalId);
          // 清除以后需要重新置空
          this.intervalId = null;
        }
      }
    })
  </script>
</body>
</html>